// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/ilike.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// do_importance_sampler
List do_importance_sampler(const List& model, const List& algorithm);
RcppExport SEXP _ilike_do_importance_sampler(SEXP modelSEXP, SEXP algorithmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const List& >::type algorithm(algorithmSEXP);
    rcpp_result_gen = Rcpp::wrap(do_importance_sampler(model, algorithm));
    return rcpp_result_gen;
END_RCPP
}
// a_test
double a_test(const List& model);
RcppExport SEXP _ilike_a_test(SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(a_test(model));
    return rcpp_result_gen;
END_RCPP
}
// store_L1_uniform_evaluate_log_abc_kernel
SEXP store_L1_uniform_evaluate_log_abc_kernel();
RcppExport SEXP _ilike_store_L1_uniform_evaluate_log_abc_kernel() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(store_L1_uniform_evaluate_log_abc_kernel());
    return rcpp_result_gen;
END_RCPP
}
// store_L2_uniform_evaluate_log_abc_kernel
SEXP store_L2_uniform_evaluate_log_abc_kernel();
RcppExport SEXP _ilike_store_L2_uniform_evaluate_log_abc_kernel() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(store_L2_uniform_evaluate_log_abc_kernel());
    return rcpp_result_gen;
END_RCPP
}
// store_Linf_uniform_evaluate_log_abc_kernel
SEXP store_Linf_uniform_evaluate_log_abc_kernel();
RcppExport SEXP _ilike_store_Linf_uniform_evaluate_log_abc_kernel() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(store_Linf_uniform_evaluate_log_abc_kernel());
    return rcpp_result_gen;
END_RCPP
}
// store_gaussian_uniform_evaluate_log_abc_kernel
SEXP store_gaussian_uniform_evaluate_log_abc_kernel();
RcppExport SEXP _ilike_store_gaussian_uniform_evaluate_log_abc_kernel() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(store_gaussian_uniform_evaluate_log_abc_kernel());
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _ilike_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _ilike_RcppExport_registerCCallable() { 
    R_RegisterCCallable("ilike", "_ilike_RcppExport_validate", (DL_FUNC)_ilike_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_ilike_do_importance_sampler", (DL_FUNC) &_ilike_do_importance_sampler, 2},
    {"_ilike_a_test", (DL_FUNC) &_ilike_a_test, 1},
    {"_ilike_store_L1_uniform_evaluate_log_abc_kernel", (DL_FUNC) &_ilike_store_L1_uniform_evaluate_log_abc_kernel, 0},
    {"_ilike_store_L2_uniform_evaluate_log_abc_kernel", (DL_FUNC) &_ilike_store_L2_uniform_evaluate_log_abc_kernel, 0},
    {"_ilike_store_Linf_uniform_evaluate_log_abc_kernel", (DL_FUNC) &_ilike_store_Linf_uniform_evaluate_log_abc_kernel, 0},
    {"_ilike_store_gaussian_uniform_evaluate_log_abc_kernel", (DL_FUNC) &_ilike_store_gaussian_uniform_evaluate_log_abc_kernel, 0},
    {"_ilike_RcppExport_registerCCallable", (DL_FUNC) &_ilike_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_ilike(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
